language: java
dist: trusty
sudo: required
group: deprecated-2017Q4

jdk: openjdk8

services:
  - docker

cache:
  directories:
  - .autoconf
  - $HOME/.m2
  - _build
  - deps

before_install:
- echo -e "machine github.com\n  login $GITHUB_TOKEN" >> ~/.netrc
- git lfs pull

branches:
  only:
    - dev
    - master
    
stages:
  - deploy test server               #TODO: need to fix
  - unit and rest api tests
  - selenium test
  - name: push docker test image
    if: branch = dev
  - name: deploy prod and push docker image
    if: branch = master

jobs:
  include:
    - stage: deploy test server
      env:
        - BRANCH_LINUX_CHROME=linux-chrome
        - BRANCH_LINUX_FIREFOX=linux-firefox
      script:
        - git branch ${BRANCH_LINUX_FIREFOX}
        - git push -f origin ${BRANCH_LINUX_FIREFOX}
        - git branch ${BRANCH_LINUX_CHROME}            #TODO: need to fix
        - git push -f origin ${BRANCH_LINUX_CHROME}    #TODO: need to fix
    - stage: unit and rest api tests
      os:
        - linux
      env:
        - UNIT=unit-test
      script:
        - mvn test -P ${UNIT}
    - stage: unit and rest api tests
      os:
        - linux
      env:
        - API=api-test
      script:
        - mvn test -P ${API}
    - stage: selenium test
      os:
        - linux
      env:
        - BROWSER=chrome
        - BRANCH_LINUX_CHROME=linux-chrome           #TODO: need to refactoring
      before_script:
        - git branch ${BRANCH_LINUX_CHROME}          #TODO: need to refactoring
        - git push -f origin ${BRANCH_LINUX_CHROME}  #TODO: need to refactoring
      script:
        - if [ $BROWSER == 'chrome' ]; then docker-compose up -d; fi
        - if [ $BROWSER == 'chrome' ]; then mvn test -P linux-chrome; fi
    - stage: selenium test
      os:
        - linux
      env:
        - BROWSER=firefox
      script:
        - if [ $BROWSER == 'firefox' ]; then docker-compose up -d; fi
        - if [ $BROWSER == 'firefox' ]; then mvn test -P linux-firefox; fi
    - stage: push docker test image
      env:
        - IMAGE=fiodar/td:test
      script:
      - mvn clean package -DskipTests=true
      - mvn docker:build
      - docker login -u $DOCKER_USER -p $DOCKER_PASS
      - docker push ${IMAGE}
    - stage: deploy prod and push docker image
      env:
        - BRANCH_PROD=prod
        - IMAGE=fiodar/td
      script:
      - git branch ${BRANCH_PROD}
      - git push -f origin ${BRANCH_PROD}
      - mvn clean package -DskipTests=true
      - mvn docker:build
      - docker login -u $DOCKER_USER -p $DOCKER_PASS
      - docker push ${IMAGE}   
